<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rdf:RDF [
    <!ENTITY rdf 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
    <!ENTITY rdfs 'http://www.w3.org/2000/01/rdf-schema#'>
    <!ENTITY ac 'http://annocultor.eu/converter/'>
    <!ENTITY europeana     "http://www.europeana.eu">
    <!ENTITY ontology     "http://www.europeana.eu/ontology/">
        
    <!ENTITY parameters SYSTEM '/../profile/parameters.xml'> 
    <!ENTITY vocabularies SYSTEM '/../../vocabularies.xml'> 
    
]>
<rdf:RDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://annocultor.eu/schema/XConverter.xsd" xmlns:ac="&ac;" xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:skos="http://www.w3.org/2004/02/skos/core#" 
	xmlns:europeana="&europeana;" 
    xmlns:ontology="&ontology;" 
    xmlns:sws="http://sws.geonames.org/" xmlns:dcterms="http://purl.org/dc/terms/">
	<ac:Profile ac:institution="Europeana project" ac:publisherId="000" ac:versionAnnoCultor="2.0" rdf:about="Ese" ac:namespace="europeana">
		<!--
			Shared definition of parameters and vocabularies are loaded from the corresponding files.
		-->
		<ac:parameters rdf:parseType="Collection">
    &parameters;
		</ac:parameters>
		<ac:vocabularies rdf:parseType="Collection">
           &vocabularies;
		</ac:vocabularies>

		<ac:repositories rdf:parseType="Collection">
			<ac:Repository rdf:about="Time">
				<ac:datasources rdf:parseType="Collection">

                    <ac:XmlDataSource>
                        <ac:file>dates.solr.xml</ac:file>
                    </ac:XmlDataSource>
    
				</ac:datasources>
				<ac:destinations rdf:parseType="Collection">
					<!--
						Destinations are separate RDF files that will be created. Each property rule has a parameter that specifies where to store the result. Splitting a dataset among several files may be quite useful
						in practice.
					-->
					<ac:RdfGraph rdf:about="Periods" >
					 <ac:comment>Original periods (literal properties)</ac:comment>
					</ac:RdfGraph>
					<ac:RdfGraph rdf:about="PeriodsDates">
                      <ac:comment>Enrichments based on record field dc:date</ac:comment>
                    </ac:RdfGraph>
                    <ac:SolrDocumentsFile rdf:about="PeriodsSolr">
                      <ac:comment>Enrichments based on record field dc:date</ac:comment>
                    </ac:SolrDocumentsFile>
 				</ac:destinations>
				<ac:objectRules rdf:parseType="Collection">
					<ac:ObjectRule rdf:about="subjectRule">
						<ac:recordSeparator>/response/result/doc</ac:recordSeparator>
						<ac:recordIdentifier>/response/result/doc/str[@name='europeana_uri']</ac:recordIdentifier>
						<ac:recordInformalIdentifier>/response/result/doc/str</ac:recordInformalIdentifier>

						<ac:listeners rdf:parseType="Collection">
							<ac:OnPreCondition>
								<ac:java>
									// local identifier is a complete URI, it is already prefixed with a namespace
									//System.out.println("---- " + sourceDataObject);
									subjectRule.assumeQualifiedLocalRecordIdentifier();
									return true;
              					</ac:java>
							</ac:OnPreCondition>
						</ac:listeners>

						<ac:propertyRules>
							<!--
                                Dates
                            -->
							<ac:eu.annocultor.tagger.rules.LookupTimeRule-default>
								<ac:srcPath rdf:datatype="ac:Path">arr[@name='dc_date']/str</ac:srcPath>
								<ac:dstProperty rdf:datatype="ac:Property">ontology:periodEnrichment</ac:dstProperty>
								<ac:dstGraphLiterals rdf:datatype="ac:Graph">Periods</ac:dstGraphLiterals>
								<ac:dstGraphLinks rdf:datatype="ac:Graph">PeriodsDates</ac:dstGraphLinks>
								<ac:termsProperty rdf:datatype="ac:Property">ontology:periodEnrichment</ac:termsProperty>
								<ac:termsSignature rdf:datatype="ac:String">periods</ac:termsSignature>
								<ac:termsSplitPattern rdf:datatype="ac:String">(no_split_should_ever_happen)</ac:termsSplitPattern>
								<ac:termsVocabulary rdf:datatype="ac:VocabularyOfTime">time</ac:termsVocabulary>
                                <ac:listeners rdf:parseType="Collection">
                                    <ac:Declarations>
                                        <ac:java>                                         
                                         // missing years are reported all together
									     @Override
									     protected void reportMatch(TermList terms) throws Exception {
									     
									        for (Term term : terms) {
											  if (!term.getLabel().matches("^(\\d\\d\\d\\d)$")) {
											    super.reportMatch(terms);
											    return;
											  }
											}
											
											TermList genericYear = new TermList();
											genericYear.add(new Term("A year of four digits", null, new CodeURI("http://annocultor.eu/time/year/XXXX"), "time"));
										 	super.reportMatch(genericYear);
										 }

                                         @Override
                                         protected PairOfStrings splitToStartAndEnd(DataObject converter, String label, Language.Lang lang) {
                                            return eu.annocultor.tagger.preprocessors.EuropeanaTimeUtils.splitToStartAndEnd(label);
                                         }

                                         @Override
                                         protected void processLookupMatch(TermList terms, String termUri, String subject, DataObject dataObject, boolean createTermDefinion)
                                         throws Exception {
                                            super.processLookupMatch(terms, termUri, subject, dataObject, createTermDefinion);
                                            factory.makeGraph("PeriodsSolr").add(new Triple(subject, new Property("europeana_uri"), new LiteralValue(subject), this));                                        
                                            factory.makeGraph("PeriodsSolr").add(new Triple(subject, new Property("enrichment_time"), new LiteralValue(terms.getFirst().getCode()), this));                                        
                                         }
                                        </ac:java>
                                    </ac:Declarations>
                                    <ac:OnInit>
                                        <ac:java>
                                           //addLabelExtractor(new EuropeanaLabelExtractor(false));
                                        </ac:java>
                                    </ac:OnInit>
                                    <ac:OnInvocation>
                                        <ac:java>
                                            String termLabel = sourceTriple.getValue().getValue();
                                            // removing "made" and "printed" used by some providers 
                                            termLabel = StringUtils.removeEnd(termLabel, " made");
                                            termLabel = StringUtils.removeEnd(termLabel, " printed");
                                            termLabel = StringUtils.removeEnd(termLabel, " built");
                                            termLabel = StringUtils.removeEnd(termLabel, " existed");
                                            termLabel = StringUtils.removeEnd(termLabel, " written");
                                            termLabel = StringUtils.removeEnd(termLabel, " photographed");
                                            termLabel = StringUtils.removeEnd(termLabel, " surveyed");
                                            termLabel = StringUtils.removeEnd(termLabel, " manufactured");
                                            termLabel = StringUtils.removeEnd(termLabel, " taken");
                                            termLabel = StringUtils.removeEnd(termLabel, " first published");
                                            termLabel = StringUtils.removeEnd(termLabel, " published");
                                            termLabel = StringUtils.removeEnd(termLabel, " cuttings collected");
                                            return sourceTriple.changeValue(new LiteralValue(termLabel));
                                        </ac:java>
                                    </ac:OnInvocation>
                                </ac:listeners>
                                </ac:eu.annocultor.tagger.rules.LookupTimeRule-default>
						</ac:propertyRules>
					</ac:ObjectRule>
				</ac:objectRules>

				<!--
					Conversion limit made for debugging. A positive value would stop conversion after the corresponding number of records is passed. Note: in a normal completion it creates all output files but end
					with an exception that is raised to stop conversion. Watch out!
				-->
				<ac:maxRecordsToConvert>-1</ac:maxRecordsToConvert>
			</ac:Repository>
		</ac:repositories>
	</ac:Profile>
</rdf:RDF>