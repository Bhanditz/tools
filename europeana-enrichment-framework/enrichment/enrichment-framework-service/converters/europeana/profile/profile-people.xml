<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE rdf:RDF [
    <!ENTITY rdf 'http://www.w3.org/1999/02/22-rdf-syntax-ns#'>
    <!ENTITY rdfs 'http://www.w3.org/2000/01/rdf-schema#'>
    <!ENTITY ac 'http://annocultor.eu/converter/'>
    <!ENTITY europeana     "http://www.europeana.eu">
    <!ENTITY ontology     "http://www.europeana.eu/ontology/">
        
    <!ENTITY parameters SYSTEM '/../profile/parameters.xml'> 
    <!ENTITY vocabularies SYSTEM '/../../vocabularies.xml'> 
    
]>
<rdf:RDF xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://annocultor.eu/schema/XConverter.xsd" xmlns:ac="http://annocultor.eu/converter/" xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#" xmlns:skos="http://www.w3.org/2004/02/skos/core#" xmlns:oldskos="http://www.w3.org/2004/02/skos/core#"
	xmlns:europeana="&europeana;" 
    xmlns:ontology="&ontology;" 
    xmlns:sws="http://sws.geonames.org/" xmlns:dcterms="http://purl.org/dc/terms/">
	<ac:Profile ac:institution="Europeana project" ac:publisherId="000" ac:versionAnnoCultor="2.0" rdf:about="Ese" ac:namespace="europeana">
		<!--
			Shared definition of parameters and vocabularies are loaded from the corresponding files.
		-->
		<ac:parameters rdf:parseType="Collection">
    &parameters;
		</ac:parameters>
		<ac:vocabularies rdf:parseType="Collection">
           &vocabularies;
		</ac:vocabularies>

		<ac:repositories rdf:parseType="Collection">
			<ac:Repository rdf:about="People">
				<ac:datasources rdf:parseType="Collection">
					<ac:XmlDataSource>
						<ac:file>*.xml</ac:file>
					</ac:XmlDataSource>
				</ac:datasources>
				<ac:destinations rdf:parseType="Collection">
					<!--
						Destinations are separate RDF files that will be created. Each property rule has a parameter that specifies where to store the result. Splitting a dataset among several files may be quite useful
						in practice.
					-->
					<ac:RdfGraph rdf:about="People">
					  <ac:comment>Records for people (literal properties)</ac:comment>	
					</ac:RdfGraph>  
					<ac:RdfGraph rdf:about="PeopleCreators">
                      <ac:comment>Enrichments based on record field dc:creator</ac:comment>
                    </ac:RdfGraph>
                    <ac:RdfGraph rdf:about="PeopleContributors">
                      <ac:comment>Enrichments based on record field dc:contributor</ac:comment>
                    </ac:RdfGraph>
  				</ac:destinations>
				<ac:objectRules rdf:parseType="Collection">
					<ac:ObjectRule rdf:about="subjectRule">
						<ac:recordSeparator>/metadata/record</ac:recordSeparator>
						<ac:recordIdentifier>/metadata/record/europeana:uri</ac:recordIdentifier>
						<ac:recordInformalIdentifier>/metadata/record/dc:identifier</ac:recordInformalIdentifier>

						<ac:listeners rdf:parseType="Collection">
							<ac:OnPreCondition>
								<ac:java>
									// local identifier is a complete URI, it is already prefixed with a namespace
									subjectRule.assumeQualifiedLocalRecordIdentifier();
									return true;
              					</ac:java>
							</ac:OnPreCondition>
						</ac:listeners>

						<ac:propertyRules>
							<!--
                                People
                            -->

							<ac:eu.annocultor.tagger.rules.LookupPersonRule-noLocalTerms>
								<ac:srcPath rdf:datatype="ac:Path">dc:creator</ac:srcPath>
								<ac:dstProperty rdf:datatype="ac:Property">dc:creator</ac:dstProperty>
								<ac:dstGraphLiterals rdf:datatype="ac:Graph">People</ac:dstGraphLiterals>
								<ac:dstGraphLinks rdf:datatype="ac:Graph">PeopleCreators</ac:dstGraphLinks>
								<ac:birthPath rdf:datatype="ac:Path">dates</ac:birthPath>
								<ac:deathPath rdf:datatype="ac:Path">dates</ac:deathPath>
								<ac:termsProperty rdf:datatype="ac:Property">dc:creator</ac:termsProperty>
								<ac:termsSignature rdf:datatype="ac:String">country</ac:termsSignature>
								<ac:termsSplitPattern rdf:datatype="ac:String">( *; *)</ac:termsSplitPattern>
								<ac:termsVocabulary rdf:datatype="ac:VocabularyOfPeople">people</ac:termsVocabulary>
                                <ac:listeners rdf:parseType="Collection">
                                    <ac:OnInvocation>
                                        <ac:java>
                                           return sourceTriple.changeValue(
                                             new LiteralValue(
                                               new PersonDetails(sourceTriple.getValue().getValue()).getFullName()));
                                        </ac:java>
                                    </ac:OnInvocation>
                                </ac:listeners>
							</ac:eu.annocultor.tagger.rules.LookupPersonRule-noLocalTerms>

                            <ac:eu.annocultor.tagger.rules.LookupPersonRule-noLocalTerms>
                                <ac:srcPath rdf:datatype="ac:Path">dc:contributor</ac:srcPath>
                                <ac:dstProperty rdf:datatype="ac:Property">dc:contributor</ac:dstProperty>
                                <ac:dstGraphLiterals rdf:datatype="ac:Graph">People</ac:dstGraphLiterals>
                                <ac:dstGraphLinks rdf:datatype="ac:Graph">PeopleContributors</ac:dstGraphLinks>
                                <ac:birthPath rdf:datatype="ac:Path">dates</ac:birthPath>
                                <ac:deathPath rdf:datatype="ac:Path">dates</ac:deathPath>
                                <ac:termsProperty rdf:datatype="ac:Property">dc:contributor</ac:termsProperty>
                                <ac:termsSignature rdf:datatype="ac:String">contributor</ac:termsSignature>
                                <ac:termsSplitPattern rdf:datatype="ac:String">( *; *)</ac:termsSplitPattern>
                                <ac:termsVocabulary rdf:datatype="ac:VocabularyOfPeople">people</ac:termsVocabulary>
                                <ac:listeners rdf:parseType="Collection">
                                    <ac:OnInvocation>
                                        <ac:java>
                                           return sourceTriple.changeValue(
                                             new LiteralValue(
                                               new PersonDetails(sourceTriple.getValue().getValue()).getFullName()));
                                        </ac:java>
                                    </ac:OnInvocation>
                                </ac:listeners>
                            </ac:eu.annocultor.tagger.rules.LookupPersonRule-noLocalTerms>
 						</ac:propertyRules>
					</ac:ObjectRule>
				</ac:objectRules>

				<!--
					Conversion limit made for debugging. A positive value would stop conversion after the corresponding number of records is passed. Note: in a normal completion it creates all output files but end
					with an exception that is raised to stop conversion. Watch out!
				-->
				<ac:maxRecordsToConvert>-1</ac:maxRecordsToConvert>
			</ac:Repository>
		</ac:repositories>
	</ac:Profile>
</rdf:RDF>